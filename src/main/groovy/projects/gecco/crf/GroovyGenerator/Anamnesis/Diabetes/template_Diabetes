package projects.gecco.crf

import ca.uhn.fhir.model.api.TemporalPrecisionEnum
import de.kairos.fhir.centraxx.metamodel.CatalogEntry
import de.kairos.fhir.centraxx.metamodel.CrfItem
import de.kairos.fhir.centraxx.metamodel.CrfTemplateField
import de.kairos.fhir.centraxx.metamodel.LaborValue

import static de.kairos.fhir.centraxx.metamodel.RootEntities.studyVisitItem

/**
 * Represented by a CXX StudyVisitItem
 * Specified by https://simplifier.net/forschungsnetzcovid-19/diabetesmellitus
 * @author Lukas Reinert, Mike WÃ¤hnert
 * @since KAIROS-FHIR-DSL.v.1.8.0, CXX.v.3.18.1
 *
 */
condition {
  final def studyCode = context.source[studyVisitItem().studyMember().study().code()]
  if (studyCode != "GECCO FINAL") {
    return //no export
  }
  final def crfName = context.source[studyVisitItem().template().crfTemplate().name()]
  final def studyVisitStatus = context.source[studyVisitItem().status()]
  if (crfName != "SarsCov2_ANAMNESE / RISIKOFAKTOREN" || studyVisitStatus != "APPROVED") {
    return //no export
  }

  final def crfItemGeneralDiab = context.source[studyVisitItem().crf().items()].find {
    "COV_GECCO_DIABETES" == it[CrfItem.TEMPLATE]?.getAt(CrfTemplateField.LABOR_VALUE)?.getAt(LaborValue.CODE)
  }
  if (!crfItemGeneralDiab || crfItemGeneralDiab[CrfItem.CATALOG_ENTRY_VALUE] == []) {
    return //no export
  }

  String diabetesCode = crfItemGeneralDiab[CrfItem.CATALOG_ENTRY_VALUE][0][CatalogEntry.CODE]

  final def crfItemDiab = context.source[studyVisitItem().crf().items()].find {
    "##ParameterCodeDisease##" == it[CrfItem.TEMPLATE]?.getAt(CrfTemplateField.LABOR_VALUE)?.getAt(LaborValue.CODE)
  }

  if(diabetesCode != "COV_NEIN" && (crfItemDiab == null || crfItemDiab[CrfItem.CATALOG_ENTRY_VALUE] == [])) {
    return
  }

  id = "Condition/DiabetesMellitus_##IdComplement##_" +  context.source[studyVisitItem().crf().id()]

  meta {
    source = "https://fhir.centraxx.de"
    profile "https://www.netzwerk-universitaetsmedizin.de/fhir/StructureDefinition/diabetes-mellitus"
  }

  if(diabetesCode != "COV_NEIN"){
    diabetesCode = crfItemDiab[CrfItem.CATALOG_ENTRY_VALUE][0][CatalogEntry.CODE]
  }

  // Unknown
  if (diabetesCode == "COV_UNBEKANNT") {
    modifierExtension {
      url = "https://www.netzwerk-universitaetsmedizin.de/fhir/StructureDefinition/uncertainty-of-presence"
      valueCodeableConcept {
        coding {
          system = "http://snomed.info/sct"
          code = "261665006"
        }
      }
    }
    // NO / YES
  } else if (["COV_NEIN", "COV_JA"].contains(diabetesCode)) {
    verificationStatus {
      coding {
        system = "http://snomed.info/sct"
        code = matchResponseToVerificationStatus(diabetesCode)
      }
      coding {
        system = "http://terminology.hl7.org/CodeSystem/condition-ver-status"
        code = matchResponseToVerificationStatusHL7(diabetesCode)
      }
    }
  }

  // Only Applicable to Ja
  if (["COV_JA"].contains(diabetesCode)) {
    clinicalStatus {
      coding {
        system = "http://terminology.hl7.org/CodeSystem/condition-clinical"
        code = "active"
        display = "Active"
      }
    }
  }

  category {
    coding {
      system = "http://snomed.info/sct"
      code = "408475000"
      display = "Diabetic medicine"
    }
  }

  subject {
    reference = "Patient/Patient-" + context.source[studyVisitItem().studyMember().patientContainer().idContainer()]?.find {"MPI" == it["idContainerType"]?.getAt("code")}["psn"]
  }

  code {
    final def ICDcode = "##ICDCode##"
    if (ICDcode) {
      coding {
        system = "http://fhir.de/CodeSystem/dimdi/icd-10-gm"
        version = "2020"
        code = ICDcode
      }
    }

    final def SNOMEDcode = "##SnomedCode##"
    if (SNOMEDcode) {
      coding {
        system = "http://snomed.info/sct"
        code = SNOMEDcode
        display = "##DiseaseName-EN##"
      }
    }
  }

  recordedDate {
    date = normalizeDate(context.source[studyVisitItem().lastApprovedOn()] as String)
    precision = TemporalPrecisionEnum.DAY.toString()
  }
}


static String matchResponseToVerificationStatus(final String resp) {
  switch (resp) {
    case null:
      return null
    case ("COV_UNBEKANNT"):
      return "261665006"
    case ("COV_NEIN"):
      return "410594000"
    default: "410605003"
  }
}

static String matchResponseToVerificationStatusHL7(final String resp) {
  switch (resp) {
    case null:
      return null
    case ("COV_UNBEKANNT"):
      return "unconfirmed"
    case ("COV_NEIN"):
      return "refuted"
    default: "confirmed"
  }
}

static String normalizeDate(final String dateTimeString) {
  return dateTimeString != null ? dateTimeString.substring(0, 10) : null
}
