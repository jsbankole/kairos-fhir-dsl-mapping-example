package projects.gecco.crf

import ca.uhn.fhir.model.api.TemporalPrecisionEnum
import de.kairos.fhir.centraxx.metamodel.CatalogEntry
import de.kairos.fhir.centraxx.metamodel.CrfItem
import de.kairos.fhir.centraxx.metamodel.CrfTemplateField
import de.kairos.fhir.centraxx.metamodel.LaborValue

import static de.kairos.fhir.centraxx.metamodel.RootEntities.studyVisitItem

/**
 * Represented by a CXX StudyVisitItem
 * Specified by https://simplifier.net/forschungsnetzcovid-19/radiologyprocedures
 * @author Lukas Reinert, Mike WÃ¤hnert
 * @since KAIROS-FHIR-DSL.v.1.8.0, CXX.v.3.18.1
 */
procedure {
  final def studyCode = context.source[studyVisitItem().studyMember().study().code()]
  if (studyCode != "GECCO FINAL") {
    return //no export
  }
  final def crfName = context.source[studyVisitItem().template().crfTemplate().name()]
  final def studyVisitStatus = context.source[studyVisitItem().status()]
  if (crfName != "SarsCov2_BILDGEBUNG" || studyVisitStatus != "APPROVED") {
    return //no export
  }
  final def crfItemRadProc = context.source[studyVisitItem().crf().items()].find {
    "COV_GECCO_BILD_LUNGE" == it[CrfItem.TEMPLATE]?.getAt(CrfTemplateField.LABOR_VALUE)?.getAt(LaborValue.CODE)
  }
  if (!crfItemRadProc) {
    return
  }

  if (crfItemRadProc[CrfItem.CATALOG_ENTRY_VALUE] == []) {
    return
  }

  final def procedure_performed = crfItemRadProc[CrfItem.CATALOG_ENTRY_VALUE].find {
    "##ParameterCode##" == it[CatalogEntry.CODE]
  }

  if(!procedure_performed){
    return
  }

  id = "Procedure/RadiologyProcedures-##IdComplement##-" + context.source[studyVisitItem().id()]

  meta {
    source = "https://fhir.centraxx.de"
    profile "https://www.netzwerk-universitaetsmedizin.de/fhir/StructureDefinition/radiology-procedures"
  }

  status = "unknown"

  category {
    coding {
      system = "http://snomed.info/sct"
      code = "103693007"
      display = "Diagnostic procedure (procedure)"
    }
  }

  code {
    coding{
      system = "http://snomed.info/sct"
      code = "##SnomedCode##"
      display = "##SnomedText##"
    }
    coding{
      system = "http://dicom.nema.org/resources/ontology/DCM"
      code = "##DCMCode##"
      display = "##DCMText##"
    }
    text = "##Text##"
  }

  subject {
    reference = "Patient/Patient-" + context.source[studyVisitItem().studyMember().patientContainer().idContainer()]?.find {"MPI" == it["idContainerType"]?.getAt("code")}["psn"]
  }

  performedDateTime {
    date = normalizeDate(context.source[studyVisitItem().lastApprovedOn()] as String)
    precision = TemporalPrecisionEnum.DAY.toString()
  }
  bodySite {
    coding {
      system = "http://snomed.info/sct"
      code = "39607008"
      display = "Lung structure (body structure)"
    }
  }
}

static String normalizeDate(final String dateTimeString) {
  return dateTimeString != null ? dateTimeString.substring(0, 19) : null
}

